{"pages":[{"url":"pages/about.html","text":"Name sennhvi Email sennhvi@gmail.com Characteristic TTP: 需求导向的学习患者 任务有挑战才好玩！ 不否定业务的必要性，但是成长太慢 不会吹牛，无可炫耀 总是感觉什么都不会，什么都想学 数学需要继续学习，书还是看得太少 说渣不为过,因为经常折腾，什么都好玩，什么都想折腾... 不能说学到什么精通什么，但是对新事物总是很感兴趣的 也学MOOC,自学过 python ，然而并不知道什么算\"精通\" 虽然依然渺小，只怕有一颗积极进取的内心 ps:由于PAF（Poor As Fuck)，域名到期了就没管了 More 还是在大二的时候，李大杰说过这样一句话：\"你连《c++ primer》(600多页)都看不完，怎么能说你能看完其他的书？\" 是啊，教科书几百页也不会全部教授，上课考试都是靠课件，最后为了应试学到了什么？学过了也忘了，并不是不继续学习的借口。要找工作了，却只模糊地记得什么算法，于是重新学起《算法》，哪里不会点哪里～只有每天学了点东西，才感觉真实的存在吧。 曾经看《c primer plus》只看到一半就搁置了的人，现在也能看完一本《core python programming》，和他们比起来自己看得书有过的经历还是太少，但是怎么会轻易放弃。","tags":"pages","title":"About"},{"url":"pages/reading-list.html","text":"Reading STACK [Algorithms] [TAOCP] [应用密码学] [数学之美] [Concrete Math] [CSAP] [The Linux Kernel] [深入理解Nginx] [Design Pattern] [Effective C++ Ed3] [ESL] [自动机理论] [费曼物理学讲义] [现代密码学导论] [javascript权威指南] [鸟哥的Linux] [Linux一站式C编程] [Machine Learning] [机器学习实战] [神经网络与机器学习] [神经网络模式识别] [人月神话] [Pro Git] [Programming Pearl] [程序员修炼之道] [龙书] [Python编程实战] [Python源码剖析] [Python标准库] [Scala编程] [TAOCP] [Java编程思想] [Unix环境高级编程] [Unix编程艺术] NULL NULL READ STACK [ Python数据分析 ] [ Python网络数据采集 ] [ SQL学习指南 ] [ 图解图书之TCP/IP ] [ 如何高效学习 ] [ Linux编辑器与shell ] [ Unix入门经典 ] [ 禅与摩托车维修艺术 ] [ 精通正则表达式 ] [ Core Python Program ] [ Git权威指南 ] [ C++ Primer ] [ Head First Python ] [ 树莓派python编程指南 ] [ 大话数据结构 ] [ < s ></ s > ] ![]({filename}/images/readbooks/.jpg) from PIL import Image import os for filename in os . listdir ( \"./\" ): pil_im = Image . open ( filename ) . resize (( 110 , 140 ), Image . ANTIALIAS ) . save ( filename )","tags":"pages","title":"Reading List"},{"url":"pages/to-do-list.html","text":"新鲜坑 Django Review Python scrawler DS,AG PPPPython Aqicn.org爬取，或者api, for Android Android dict. caoword 上古坑 Django Book Build some shit algs code [ vacation ] computer basis & Linux Admin Handbook [ vacation ] android learning [ idle ] mathematics [ vacation ] tackle bookmarks [ idle ] gallery framework [ after exam ] deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main multiverse restricted universe","tags":"pages","title":"To-do List"},{"url":"pages/2018/06/19/raspberry-notebook/","text":"Raspberry Pi 3B+ Notebook 0. How to disable default account 'pi' 建立临时账号 使用rasp-config关闭自动登录(使pi用户相关进程不启动)和开启连接网络后再登录(以防失联) 使用临时账号登录并su获取root权限 killall -u pi # 杀掉用户pi的所有进程 usermod # 修改pi账户的信息为你指定的内容即可 1. 树莓派解决libGLESv2.so问题 $ sudo apt-get install libgles2-mesa libsdl2-dev libegl1-mesa-dev 2. 树莓派摄像头模块没有/dev/video0设备节点的问题 sudo rpi-update # to make sure the v4L2 drive is available. sudo modprobe bcm2835-v4l2 # to load it and create /dev/video0 sudo apt-get upgrade sudo rpi-update 在 /etc/ 下面的 modules-load.d/rpi-camera.conf 里面添加一行 bcm2835-v4l2 ，然后 sudo reboot 3. 更新pip后发生 ImportError: cannot import name 'main' 的问题 from pip import main if __name__ == '__main__' : sys . exit ( main ()) 4. Raspberry Pi 3B+使用注意事项 树莓派每个引脚最大接受电流16mA 所有GPIO引脚的电流总和不能超过50mA 5.","tags":"Raspberry pi","title":"Raspberry Notebook"},{"url":"pages/2016/09/08/android-related/","text":"0. Android布局学习 textview 属性： android:layout_alignParentLeft=\"true\" ::控制该组件是否与布局容器左边对齐 android:ellipsize=\"marquee\" ::设置当文字过长时,该控件该如何显示。有如下值设置：\"start\"--省略号显示在开头;\"end\"--省略号显示在结尾;\"middle\"--省略号显示在中间;\"marquee\" ——以跑马灯的方式显示(动画横向移动). android:maxLines=\"5\" ::android:maxLines设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示. android:scrollHorizontally=\"true\" ::设置文本超出TextView的宽度的情况下，是否出现横拉条. android:singleLine=\"true\" ::设置单行显示. android:includeFontPadding=\"false\" ::设置文本是否包含顶部和底部额外空白，默认为true. android:layout_gravity=\"center\" ::属性是对该view中内容的限定．比如一个button 上面的text. 你可以设置该text 相对于view的靠左，靠右等位置. android:gravity=\"center\" ::是用来设置该view相对与父view 的位置．比如一个button 在linearlayout里，你想把该button放在linearlayout里靠左、靠右等位置就可以通过该属性设置. 控件位置： android:layout_below =\"@id/xxx\" -- 将控件置于给定id控件之下 android:layout_toLeftOf =\"@id/xxx\" -- 将控件的右边缘和给定ID控件的左边缘对齐 android:layout_alignLeft =\"@id/xxx\" -- 将控件的左边缘和给定ID控件的左边缘对齐 android:layout_alignParentLeft =\"true\" --将控件的左边缘和父控件的左边缘对齐 android:layout_centerInParent =\"true\" --将控件置于父控件的中心位置 tools ： Tools Attributes文档 xml 中的辅助功能，如 include 另一个 xml ，是看不到界面的，加入 tools:showlayoutin=\"\" 可以显示， scrollview 类似 tools:context=\"\" 将 layout 和某些 Activity 关联，仅用于可见即可得效果，因为和 activities 相关的 theme 在 manifest 中定义，而不是布局，且并不需要给出 activity 类的绝对路径 CoordinatorLayout 官方文档 作为应用的顶层装饰或 chrome 布局 作为与一个或多个子视图进行指定交互的容器 举个栗子： csdn实例 Toolbar,AppBarLayout,CollapsingToolbarLayout： csdn实例 Toolbar ：具有更多的灵活性，用以取代固定在顶部的ActionBar，因此需要隐藏ActionBar AppBarLayout ：继承自LinearLayout，布局方向为垂直方向。所以你可以把它当成垂直布局的LinearLayout来使用。AppBarLayout是在LinearLayou上加了一些材料设计的概念，可以让你定制当某个可滚动View的滚动手势发生变化时，其内部的子View实现何种动作 CollapsingToolbarLayout ：用来对Toolbar进行再次包装的ViewGroup，主要是用于实现折叠（其实就是看起来像伸缩~）的App Bar效果。 Android Drawable XML Documentation ： Android Drawable XML文档 1. Android方法学习 1. setlayoutparams ： 1.应用于构建动态布局，LayoutParams继承于Android.View.ViewGroup.LayoutParams. 2.LayoutParams相当于一个Layout的信息包，它封装了Layout的位置、高、宽等信息。假设在屏幕上一块区域是由一个Layout占领的，如果将一个View添加到一个Layout中，最好告诉Layout用户期望的布局方式，也就是将一个认可的layoutParams传递进去。 3.LayoutParams类也只是简单的描述了宽高，宽和高都可以设置成三种值： 1.一个确定的值 2.FILL_PARENT，即填满（和父容器一样大小）； 3.WRAP_CONTENT，即包裹住组件就好。 setLayoutParams ( new LayoutParams ( LayoutParams . FILL_PARENT , LayoutParams . FILL_PARENT ));","tags":"Android","title":"Android Related"},{"url":"pages/2016/09/04/classic-shell-scripting/","text":"0. Abstract 写作原因：虽然写篇真的很费精力，看完本书，过几月再回顾的时候，记忆寥寥，用时再查，无论baidu,google，都需要多一步筛选，良莠不齐的回答更是浪费时间 本文目的：复习整理，备忘记录，个人查询 1. Background Knowledge 将设备视为文件，以及特意不将命令解释器或shell整合到操作系统中。 2. Introduction 2.1 基本I/O重定向 $ cat << ! >> ~/.bashrc > ... >! ### 实用方法修改并输出，删除dos-file.txt所有回车并写入UNIX-file.txt $ tr -d '\\r' < dos-file.txt > UNIX-file.txt ### 实用方法快速新建文本 $ cat > nusers >who | wc -l &#94;D $ ### 与下面效果相同 $ cat > nusers << EOF >who | wc -l >EOF 2.2 #! 当 Shell 执行一个程序时，会要求 UNIX 内核启动一个新的进程，以便在该进程里执行所指定的程序。以 #! 为开头的文件，内核会扫描该行其余部分查看是否存在对应解释器的完整路径（如 /usr/bin/awk )，以及是否含有选项。 #! 一行的长度限制: 63-1024 #! 一行若没有选项: #!/bin/bash - 可避免某种程度的欺骗式攻击 SHELL 识别三种基本命令：内建命令( read , test ...)、 shell 函数( equal )、外部命令(由 shell 的副本执行的命令)。 2.3 变量赋值: $ myvar = this_is_variable $ echo $myvar $ first = issac middle = bashev last = singer ### 单行多次赋值 $ fullname = \"issac bashev singer\" ### 变量包含空格时需要使用引号 $ oldname = $fullname ### 无需引号 $ fullname = \" $first $middle $last \" ### 此处需要引号 2.4 echo 原本自带 \"\\n\" ， BSD 版本的 echo 第一个参数为 -n 时，会省略 \"\\n\" ； System V 版本 \\c 指示 echo 不打印最后的 \"\\n\" 。少见的转义序列: \\f 清屏，更丰富的输出请使用 printf tr [options] source-char-list replace-char-list : 转换字符 -c: 取 source-char-list 的反义( source 取反)，处理二进制字节值 -C :同 -c ，但处理现行 locale 定义的字符 -d :从 STDIN 删除 source-char-list 里所列的字符 -s :浓缩重复的字符(来自 source-char-list ) 2.5 两个特殊文件: /dev/null ， /dev/tty /dev/null 位桶( bit bucket )，如果你需要的是命令的退出状态，而非输出，此功能会很有用： if grep pattern myfile > /dev/null then ... ### 找到模式 else ... ### 找不到模式时 fi 读取 /dev/null 则会立即返回文件结束符号( EOF ) /dev/tty ，当程序打开此文件时 UNIX 会自动讲它重定向到一个终端，在程序必须读取人工输入的时候很有用: $ printf \"Enter new passwd:\" $ stty -echo ### 关闭自动打印输入字符的功能 $ read pass < /dev/tty $ printf \"Enter again\" $ read pass2 < /dev/tty $ stty echo ### 打开自动打印输入字符的功能 2.6 基本命令查找-设置优先级： $ PATH = :/bin:/usr/bin ### 先找当前目录 $ PATH = /bin:/usr/bin: ### 最后查找当前目录 $ PATH = /bin::/usr/bin ### 当前目录居中 2.7 SHELL 脚本参数 基于历史原因，当超过 9 时，请用大括号把数字框起来: $ echo first arg is $1 $ echo tenth arg is ${ 10 } 2.8 简单地执行跟踪-打开跟踪开关 将会显示每个被执行到的命令，并在前面加上 \"+\" 号。在脚本中使用 set -x 命令将执行功能打开， set +x 以关闭。 $ sh -x nusers + who + wc -l 2.9 国际化( i18n )与本土化( i10n ): 国际化必须将\"所要显示的任何信息\"包含在特定的程序库调用里，执行期间由此\"程序库调用\"负责在消息目录中找到适当的译文。一般来说消息的译文就放在软件附带的文本文件中，再通过 gencat 或 msgfmt 编译成紧凑的二进制文件，以利快速查询。编译后的信息文件会被安装到特定的系统目录树中，例如 GNU 的 /usr/share/locale 与 /usr/local/share/locale 。 LANG 未设置任何 LC_XXX 变量时所使用的默认值 LC_ALL 用来覆盖掉所有其他 LC_XXX 变量的值 LC_COLLATE 使用特定地区排序规则 LC_CTYPE 使用特定地区字符集 LC_MESSAGES 使用特定地区的响应与信息；仅 POSIX 适用 LC_MONETARY 使用特定地区货币格式 LC_NUMERIC 使用特定地区数字格式 LC_TIME 使用特定地区日期与时间格式 一般来说，可以用 LC_ALL 来强制设置单一 locale ，而 LANG 则是用来设置 locale 的默认值。大多数时候，应避免未任何的 LC_XXX 变量赋值。 ISO C 与 C++ 标准只定义了 C 这个标准的 locale 名称:用来选择传统的面向 ASCII 的行为模式。 POSIX 标准则另外定义了 POSIX 这个 locale 名称，其功能等同于 C 。 $ locale -a ### 列出所有locale名称 ### 为执行环境指定locale并以-ck选项与一个LC_XXX变量来执行locale命令 $ LC_ALL = da locale -ck LC_TIME ### 取得Danish的日期时间格式 $ LC_ALL = it_IT ls --help ### 取得GNU ls的Italian辅助说明 支持 locale 的系统很多，但缺乏标准的 locale 名称，因此 locale 对 shell 脚本的可移植性帮助不大，最多只是将 LC_ALL 设置成 C ，强制采用传统的 locale 。 3. 4. 5. 6. 7. 8. 9. More [LFCS系列]如何在 Linux 上使用 GNU sed 等命令来创建、编辑和操作文件 Linux Shell 文本处理工具集锦","tags":"Linux","title":"Classic Shell Scripting"},{"url":"pages/2016/08/27/android-screen-support/","text":"Android Screen Support 0. Android手机目前常见的分辨率 手机常见分辨率: 4:3 VGA 640*480 (Video Graphics Array) VGA 320*240 (Quarter VGA) HVGA 480*320 (Half-size VGA) SVGA 800*600 (Super VGA) 5:3 WVGA 800*480 (Wide VGA) 16:9 FWVGA 854*480 (Full Wide VGA) HD 1920*1080 High Definition QHD 960*540 720p 1280*720 标清 1080p 1920*1080 高清 手机 phone 4/4s 960*640 (3:2) iphone5 1136*640 小米1 854*480(FWVGA) 小米2 1280*720 分辨率对应DPI \"HVGA mdpi\" \"WVGA hdpi \" \"FWVGA hdpi \" \"QHD hdpi \" \"720P xhdpi\" \"1080P xxhdpi \" 1. 屏幕适配的注意事项 基本设置 AndroidManifest.xml 设置 在中 Manifest 中添加子元素 android:anyDensity=\"true\" 时，应用程序安装在不同密度的终端上时，程序会分别加载xxhdpi、xhdpi、hdpi、mdpi、ldpi文件夹中的资源。 相反，如果设为false，即使在文件夹下拥有相同资源，应用不会自动地去相应文件夹下寻找资源： 如果drawable-hdpi、drawable-mdpi、drawable-ldpi三个文件夹中有同一张图片资源的不同密度表示，那么系统会去加载drawable_mdpi文件夹中的资源； 如果drawable-hpdi中有高密度图片，其它两个文件夹中没有对应图片资源，那么系统会去加载drawable-hdpi中的资源，其他同理； 如果drawable-hdpi,drawable-mdpi中有图片资源，drawable-ldpi中没有，系统会加载drawable-mdpi中的资源，其他同理，使用最接近的密度级别。 横屏竖屏目录区分 drawable-hdpi该图片即适用于横屏，也适用于竖屏； drawable-land-hdpi,当屏幕为横屏，且为高密度时，加载此文件夹的资源； drawable-port-hdpi,当屏幕为竖屏，且为高密度时，加载此文件夹中的资源。其他同理。 在res目录下建立layout-port和layout-land两个目录，里面分别放置竖屏和横屏两种布局文件，以适应对横屏竖屏自动切换。 多屏幕适配的4条黄金原则 在layout文件中设置控件尺寸时应采用fill_parent、wrap_content、match_parent和dp； 具体来说，设置view的属性 android:layout_width 和 android:layout_height 的值时，wrap_content，match_parent或dp比px更好，文字大小应该使用sp来定义。 在程序的代码中不要出现具体的像素值，在dimens.xml中定义； 为了使代码简单，android内部使用pix为单位表示控件的尺寸，但这是基于当前屏幕基础上的。为了适应多种屏幕，android建议开发者不要使用具体的像素来表示控件尺寸。 不使用AbsoluteLayout(android1.5已废弃) ，可以使用RelativeLayout替代； 对不同的屏幕提供合适大小的图片。 不同大小屏幕用不同大小的图片，low:medium:high:extra-high图片大小的比例为3:4:6:8；举例来说，对于中等密度(medium)的屏幕你的图片像素大小为48×48，那么低密度(low)屏幕的图片大小应为36×36，高(high)的为72×72，extra-high为96×96。 使用9-patch PNG图片 使用图片资源时，如果出现拉伸，因为图片处理的原因，会变形，导致界面走形。9-patch PNG图片也是一种标准的PGN图片，在原生PNG图片四周空出一个像素间隔，用来标识PNG图片中哪些部分可以拉伸、哪些不可以拉伸、背景上的边框位置等。 \"上、左\"定义可拉伸区域，\"右、下\"定义显示区域，如果用到完整填充的背景图，建议不要通过 android:padding 来设置边距，而是通过9-patch方式来定义。 Android SDK中提供了编辑9-Patch图片的工具，在tools目录下draw9patch.bat，能够立刻看到编辑后的拉伸效果，也可以直接用其他图片编辑工具编辑，但是看不到效果。 9-patch使用细节参考 不同的layout Android手机屏幕大小不一，有480x320, 640x360, 800x480... 怎样才能让Application自动适应不同的屏幕呢？ 其实很简单，只需要在res目录下创建不同的layout文件夹，比如：layout-640x360、layout-800x480……所有的layout文件在编译之后都会写入R.java里，而系统会根据屏幕的大小自己选择合适的layout进行使用。 需要注意的是： values在values-ldpi之前先找到，系统认为values比values-ldpi更接近。 在res/目录下创建一个不同的layout文件夹、values文件夹、drawable文件夹等资源文件夹 资源文件夹命名：资源名-属性1-属性2-属性3-属性4-属性5.....（ values-ldpi、values-land-mdpi） 即以 <resources_name>-<qualifier> 格式命名系统会根据屏幕的大小自己选择合适的进行使用。 其中resources_name资源名就是资源类型名，包括:drawable, values, layout, anim, raw, menu, color, animator, xml; <qualifier> 是一个配置限定符，指定对应的屏幕参数，限定符可以参考以下表： 2. 3. 4. 5. 6. 7. 8. 9.","tags":"Android","title":"Android Screen Support"},{"url":"pages/2016/08/27/faqs-in-linux/","text":"FAQs in Linux 0. VPN设置 协议：PPTP 高级设置：取消EAP，使能MPPE 1. wireshark初始配置 由于没有运行相关程序的权限， wireshark 不能识别网卡，需要 - 1. root 用户登陆方式 $ sudo wireshark 2. GUID 方式 $ groupadd -g 130 wireshark # 新建一个名为wireshark的用户组,GID从/etc/group最大组ID+1 $ usermod -a -G wireshark [ USERNAME ] # 将用户[USERNAME]添加到wireshark组中 $ chgrp wireshark /usr/bin/dumpcap # /usr/bin/dumpcap 程序属组更改为wireshark $ chmod 4750 /usr/bin/dumpcap # 修改 /usr/bin/dumpcap 的权限 更改为 4750，添加suid权限 $ setcap cap_net_raw,cap_net_admin = eip /usr/bin/dumpcap 修改完成后重新登陆即可生效。 2. MTP is a BITCH 针对 OnePlus One A0001 : $ sudo apt-get udpate $ sudo apt-get install libmtp-common mtp-tools libmtp-dev libmtp-runtime libmtp9 mtpfs $ sudo dist-upgrade # 检查设备是否识别 $sudo mtp-detect | less 对于 MTP 出现\" the process of mtp died unexpectedly \"，尝试: 取消 USB 调试 更改连接至 USB 2.0 3. SVN in eclipse subversive : SVN for eclipse 选择源:官方即可 搜索: subversive 选择: [ · ] Subversive SVN Team Provider [ · ] Subversive Revision Graph [ · ] Subversive SVN Integration for Mylyn [ · ] Subversive JDT Ignore Extensions 安装完毕重启后，进入 eclipse ，选择 Workbench -> Windows -> Perspective -> Open Perspective -> SVN Repository Exploring ，选择 SVN Kit 与 Native JavaHL 安装 如未出现，选择 Window -> Preferences -> Team -> SVN -> SVN Connecotr -> Get Connectors Subversive SVN connectors 分为: SVNKit connector 与 JavaHL connector SVNKit : 纯 java 跨平台 connectors JavaHL : 指定平台二进制 connectors ，仅供 Windows NOTE : 使用 SVN 的时候要注意是否开启了代理 使用： 在 SVN Repositories Perspective 中， New -> Repository Location ，按照要求填入仓库地址、授权信息后添加，右键 Check Out 将从远程仓库载入本地。 File -> import -> SVN ->从 SVN 检出项目-> File -> New -> Other -> SVN ->从 SVN 检出项目-> ->下一步->选择资源位置->选择检出的文件夹，可以指定需要的 label ，指定项目位置，检出版本，检出深度-> Finish ，等待 检出完成 ，项目内容会出现在 Package Explorer 中 4. Ubuntu(VPS)设定locale支持中文 sudo apt-get install language-selector language-env language-pack-zh-hans ### 安装支持 dpkg-reconfigure locales ### 更新locale ### 向/etc/default/locale中修改 LANG = \"zh_CN.UTF-8\" LANGUAGE = \"zh_CN:zh\" ### 重启shell后查看，应如下 LANG = zh_CN.UTF-8 LANGUAGE = zh_CN:zh LC_CTYPE = \"zh_CN.UTF-8\" LC_NUMERIC = \"zh_CN.UTF-8\" LC_TIME = \"zh_CN.UTF-8\" LC_COLLATE = \"zh_CN.UTF-8\" LC_MONETARY = \"zh_CN.UTF-8\" LC_MESSAGES = \"zh_CN.UTF-8\" LC_PAPER = \"zh_CN.UTF-8\" LC_NAME = \"zh_CN.UTF-8\" LC_ADDRESS = \"zh_CN.UTF-8\" LC_TELEPHONE = \"zh_CN.UTF-8\" LC_MEASUREMENT = \"zh_CN.UTF-8\" LC_IDENTIFICATION = \"zh_CN.UTF-8\" LC_ALL = 5. 双系统win在linux下没有被识别且挂载失败 Metadata kept in Windows cache, refused to mount. Failed to mount '/dev/sdx' : Operation not permitted The NTFS partition is in an unsafe state. Please resume and shutdown Windows fully ( no hibernation or fast restarting ) , or mount the volume read-only with the 'ro' mount option. 解决办法 sudo ntfsfix /dev/sdXY 6. 7. 8.","tags":"Linux","title":"FAQs in Linux"},{"url":"pages/2016/08/12/faqs-in-android-dev/","text":"0. gradle相关 1.PSI and index do not match: PSI and index do not match on Android Studio. File -> Invalidate caches and restart. 2. Gradle Error: could not execute build using gradle distribution Try(1). or Delete gradle file (.gradle/wrapper/dists/gradle-2.10-all/HASH_FOLDER) and relaunch Android Studio to make it download gradle. 3. Android Studio Gradle DSL method not found: 'android' -- Error(17, 0). cause you can't define it at the top level build.gradle,because the android build plugin isn't loaded just yet. Need to define the compile version and build tools version in app level. Delete code segment: android { compileSdkVersion ** buildToolsVersion ** } 4. Error: Configuration with name 'default' not found in Android Studio. 、 Make sure that each submodule in project has its own build.gradle file. The name 'default' happens because outer build.gradle is trying to build a project that doesn't know how to build itself, thus it is given the name 'default'. 5. 打包签名 未签名会安装包解析失败 6. Manifest.xml合并可能产生多余内容 7. Module ... is note backed by gradle 从eclipse导入项目到as，可能会出现，需要重启as，将ide项目正确链接到gradlle项目 8.[查看模块依赖]左下角：Build Variants->点击细节 9.统计方法数 dex-method-counts dx -- dex -- output = target . jar origin . jar # 生成dex文件 cat tmp . dex | head - c 92 | tail - c 4 | hexdump - e ' 1 / 4 \"%d\\n\" ' # 简单命令行方式统计输出 ， 或 ： dex - method - counts tmp . dex # 使用构建命令行工具统计 1. 设备相关 1. Android Studio 识别物理设备为 Null . Connect As: Camera(PTP) other than Media device(MTP) . 由于系统权限问题，HTC wildfire需要Android Studio以root权限运行。 通过设置SUID临时root权限来尽可能减少安全风险: # 设置adb执行文件的所有权 $ chown root:user_group adb # 使用SUID设置权限 $ chmod 4550 adb #产生: -r-sr-x--- $ adb devices 2.mtp支持 cd /home/wangsenhui/tmp/ wget -nc https://sourceforge.net/projects/libmtp/files/libmtp/1.1.11/libmtp-1.1.11.tar.gz tar xvf libmtp-1.1.11.tar.gz cd libmtp-1.1.11/ ./configure --prefix = /usr --disable-mtpz make make install cp 69 -libmtp.rules /etc/udev/rules.d/ mtp-detect 2. Linux相关 1.通过 adb 获取应用名列表 $ adb shell pm list packages 2.在 Linux 系统 vim 中设置文件编码 set fileencoding = utf -8 3. git 查看文件修改历史 $ git log --pretty = oneline [ FILE_NAME ] 3. 快捷键相关 1.在 Android Studio 中查找文件名 Ctrl+Alt+N 4. 运行相关 1. Android 自定义控件，会存在 npe 问题 无视即可 2. Android 6.0 需要在运行时查看权限，否则报 java.io.IOException: open failed: EACCES (Permission denied) stackoverflow诊断： STACKOVERFLOW 6.0权限管理： Android 6.0 XDA教程 5. 报错相关 1. exception raised during rendering : Binary XML file line # - 1 : error inflating class < unknown > java . lang . NoSuchMethodError : android . graphics . drawable . VectorDrawable_Delegate . nCreateTreeFromCopy ( JJ ) J Solution :升级Android Studio到v2.2即可；低于此版本以下则需要更改API低于24 2. java . lang . IllegalStateException : You need to use a Theme . AppCompat theme ( or descendant ) with this activity Solution :产生此问题的原因是试图将dialog主题应用到需要Appcompat主题的Activity。可以更改继承的Activity类型或添加android:theme 3. java . lang . RuntimeException : Unable to create service com . example . prankapp . BackgroundVideoRecorder : android . view . WindowManager$BadTokenException : Unable to add window android . view . ViewRootImpl$W @ 418 c0b68 -- permission denied for this window type Solution :缺少相关权限，需要请求 android.permission.SYSTEM_ALERT_WINDOW权限，对于Android 6.0设备，可以引导用户手动设置该权限：Setting->Apps->Draw over other apps（SYSTEM_ALERT_WINDOW)，引导代码如下： if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ){ // Show alert dialog to the user saying a separate permission is needed // Launch the settings activity if the user prefers Intent myIntent = new Intent ( Settings . ACTION_MANAGE_OVERLAY_PERMISSION ); startActivity ( myIntent ); } 4. Cannot resolve method makeText ( anonymous android . view . View . OnClickListener , java . lang . String , int ) Toast . makeText ( this ,,...); this 并没有指代清楚哪个对象，可能是类的，也可能是数据的， Toast.makeText 第一个参数为 Context ，此处需要明确指定为 Activity.this 5. 查看android源码， 只需要重新设置一下android sdk的位置即可： Android SDK->Edit，然后一路next下去，点击finish就一切ok了。 6. Error: Attempt to invoke virtual method ' java . lang . String java . lang . Object . toString () ' on a null object reference 因：List <String> 中元素为null 7. java . lang . NullPointerException : println needs a message 解答 8. Error: java . lang . NullPointerException : Attempt to get length of null array sendTextMessage 要检查每个值存在不为null 9. Service not registered 增加flag判断 6. 7. 8. 9.","tags":"Android","title":"FAQs in Android Dev"},{"url":"pages/2015/10/15/tips-on-head-first-pyt/","text":"Tips on HFPython 0. 关于数据处理 建议C01(Chapter01，后同)C05和C11一起看，今天看完C11正符合了5月份帮人处理csv文件的需求，demo值得初学者一试，有基础的话看代码就懂。 相关知识点推荐： - 列表推导(list comprehension不知道为什么这么翻译，交互式python中学的词组) - 函数式编程，可以深入展开 - 正则表达式re，科学计算numpy,scipy,pandas,matplotlib，机器学习scikit-learn，图像处理PIL 1. 关于函数模块和异常 C02、C03并没有很详细讲，C02可以体会到：模块发布和共享，模块导入，命名空间（循环导入，依赖错误等没有），模块API设计（相关C07函数修饰符没有详细讲）。处理异常部分实例还是足够的。 2. 关于数据存储 C04数据存储，pickle腌制--dump保存，load恢复（C08json类似），with处理文件（不够详细，相关需要了解：读写模式，读取行为，迭代器使用，写缓存，文件指针，文件属性，文件命令行参数，文件转码，os模块打开文件），C09介绍了python数据库API，可以结合pickle学习sqlite，可以继续学习ORM。 3. 关于class C06简单介绍了class，相关需要了解：新式类和经典类，类的一些特殊属性如__dict__,__str__都非常有用，多重继承，private,protected变量声明，描述符，property等。 4. 关于web开发和移动开发 C07C08C10介绍了web开发和移动开发，web开发：mvc，cgi，调试，模拟服务器处理post,get请求，异常处理（错误代码），使用GAE（书中要求py2.5，很多模块已不支持），GAE使用django表单验证框架，datastore存储数据，部署GAE应用。 android开发需要旧版安卓系统（2.2～2.7最好），sl4a和python4android应用安装（源码已转移，已使用AVD折腾，强烈不建议，条件难以高度还原且现有条件不支持，虚拟机中需搭梯子）。 5. 关于最后十个问题 IDE：django-pycharm，一般脚本vim||sublime text 处理作用域：global，变量声明规范等 测试：unittest||doctest测试框架 高级语言特性：匿名函数（lambda很久没用），生成器（yield，相关iter，reduce，map等），定义异常，函数修饰符，元类（好像还没用过） 正则表达式：看完《精通正则表达式》语言之前通用部分（perl解释）即可，了解NFA，DFA正则表达式匹配原理，捕获优先，占有优先，环视等，python相关re模块，compile，search，replace,match等。 web框架：django，web2py等，相关jinja，urllib2 ORM和NoSQL：知道，没用过 GUI编程：《交互式python》中使用simplegui，而常见使用的是Tkinter，wxPython GIL：避免使用python线程，更多：分布式计算 其他python书：python标准库，pyMOTW，learn python the hard way，python essential reference，core python programming 6. More 要熄灯了，洗洗睡吧","tags":"Python","title":"Tips On 《Head First Pyt》"},{"url":"pages/2015/09/24/ssh-login-without-password/","text":"0. 本文十分简单粗浅，旨在减少生活中的重复工作。 例如我，曾经每当 11：30 断电我就需要拔下自己的外接屏然后默默地关机，而再次开机时如果忘了插回，则会导致一些不可预测的魔幻效果。 Bill Gates说需要利用好那些懒人，因为他们知道如何用最高效的方式完成一项事情。 然而我懒 使用 ssh 控制关机就得了，于是某个应用曾经唯一的价值就是帮我\"远程\"关机、 vps 升级... 然而我懒 每次 ssh 登录输入密码真麻烦，直接丢个证书不就得了，那么就好好利用下 ssh-keyge n吧，这货在使用 github 之前还是没有用过的 1. Generate 在本地机器（如我，是手机）中的 ~/.ssh （手机中的 /data/.ssh ）目录下执行下命令: $ ssh-keygen -t rsa -C \"any_string\" 使用完毕，将在目录下生成 id_rsa 和 id_rsa.pub 。 之后，将 id_rsa 拷贝到 /sdcard/ 下以使手机应用可以访问，将 id_rsa.pub 拷贝到远程机器（使用数据线or FTP 等等），然后在远程机器上将 id_rsa.pub 的内容添加到 ~/.ssh/authorized_keys 中： $ cat id_rsa.pub >> authorized_keys 注意:目录 .ssh 和文件 authorized_keys 的权限必须是600. 2. Config 完成上述步骤就可以从手机登录远程电脑了，需要对ConnectBot简单的配置： 点击 Manage Pubkeys 点击 Import 选择 id_rsa 私钥导入，首次登录会要求输入该私钥对应密码，之后无需密码 3. Optional 取消使用密码： - 可以在 /etc/ssh/sshd_config 中关闭 把文件中的 #PasswordAuthentication yes 的 # 去掉，并将 yes 改成 no 4. More ssh ec2 key pairs","tags":"Linux","title":"Ssh Login Without Password"},{"url":"pages/2015/09/17/at-last/","text":"0. At last 最后的最后，时间证明了一切。 1. 现实 人家不会在意你曾知道多少东西，不会在意你的逼格，不会在意你是万金油什么都可以干，不会在意你能多拼命学习，不会在意你曾作出过什么努力，不会在意你曾精通过。 人家在意你现在能给我带来什么，在意你的经验现在对我有什么好处，在意你现在掌握知识的深度，在意或许你是刷题也能体现你聪明，在意你现在一门语言的代码写得怎样。 2. 贪多嚼不烂 虽然现在新技术推出很快，但很多技术本质并没有变，在有其他技术\"良好基础\"的前提下，掌握一门新技术并不需要花太长时间，但\"良好基础\"就如学习武功的内功，才是真正需要多花时间去培养的。 所以去学习新技术之前，先看看手头的技术是不是掌握好了，如果没掌握好，不妨先学好再说，不然每门技术都浅尝则止，反而是难有成就。 目标不宜太大，要有阶段性成就正向激励自己 人的学习热情都是有周期性的，最开始激情满满，一段时间后就会激情逝去，很容易就半途而废放弃了。 所以在设定阶段性目标时，最好能目标小一点，现实一点，能多一些正向的反馈，这样能让自己走的远一点。 举例来说，写程序可以优先写单元测试和界面部分，这样很快就有明确的反馈，比如当你看到单元测试全部通过了，能看到界面了。 学习不会白费 有时候辛辛苦苦学的新技术，可能不久后就会过时，这时候难免会有是不是白学的想法，但实际上学习从来不会白费的，看过一句话我觉得很有道理： 你所学习的一切都在帮助构建你头脑中的神经元网络，会帮你建立某种联系使你在后续学习其他东西时更加容易，了解一种知识能够使你跟其他知识进行比较和对比。因此，学习总是有用的，无论学什么。 3. 最后的最后，时间会证明了一切。 4. The End.","tags":"Life","title":"At Last"},{"url":"pages/2015/08/25/how-reading-affects-us/","text":"How reading affects us 0. When requirement occurs 由于俩台机器一台 win7 一台 Linux 而又不堪忍受 Linux 乌龟性能(说乌龟不要赖我，截图为证): 而相较之下， win7 游戏机性能反而好多了: 因此，在 win7 机器上安装 Linux 后，需要把 Linux 配置迁移过去，安装软件之类倒简单，参考另一篇文章 Disaster Recovery Record 可以很快恢复，所以主要任务是把主目录下 . 开头的文件都拷贝过去就行了。 1. First Attempt 尝试U盘拷贝，然而直接拷贝检索单个文件十分费时，因此还是压缩之后使用vsftpd FTP服务器直接挂传输更好。 使用 $ ls -a | grep '\\.' # 列出以\".\"开头的文件 $ tar -zcvf config.tar.gz ` ls -a | grep '\\.' ` 然而在 -v 选项让我查看处理进度的时候发现了这条命令依然是把所有文件(文件名不含 . )压缩，这时仔细查看 ls -a |grep '\\.' 发现首部包括了目录 . 和 .. ，而 . 正是指名了当前文件夹，于是覆盖了 grep 语句的本意。 2. Done 那么需要将目录 . 和 .. 过滤掉，想想继续 grep 用 -v 参数也是不行的，因为会删掉所有，不能用大条件筛选。突然想到 '' 里写 regex 啊，那么好办了，记得《精通正则》一书虽然讲 perl 正则，但是一些符号也是通用的，于是命令变为: $ tar -zcvf config.tar.gz ` ls -a | egrep '&#94;\\.\\w+' ` Done. 3. Conclusion 很多时候感觉书看了也是会忘的，比如使用grep时第一反应并没有想用正则，而是使用 -v 从结果中筛掉不满意的，然而产生的副作用让我思考我要的结果是什么结构的，读过《精通正则》和没读过是不一样的，没读过除了上网搜索不知道借助于什么，更不要指望\"灵光一闪\"了。 确实，感觉读书总会忘的，而不读，是根本没有东西可忘，读过的，也会在脑海扎根，有时给你灵光一闪。 4. More ... 继续学习吧！～","tags":"Life","title":"How reading affects us"},{"url":"pages/2015/08/23/practise-makes-for-success/","text":"Practise makes for success 刚几乎裸考完python研发招聘，又正三观了 0. Abstract 几乎没准备，虽然一直也关注 python 相关 tech blog ，大半年没写复杂点或者深入涉及多线程的程序就上战场了，知道 GIL 然而并不知道怎么用，想来人生中初次视频笔试如此尴尬，以后笔试必然要早作准备多作准备呀 室友从起床到打游戏，虽然我并不玩，但是刚开考突然的声音依然会吸引注意力，戴耳机也不好使。 那么，记录下接下来要重复学习和深入涉及的一些内容吧！ 1. Written test 页表：物理地址，逻辑地址 KMP 算法：还写过一个程序，只知道是怎么回事 组合数学：棋盘，路径问题 C++ ：继承，初始化 Java ：基本类型和引用类型比较 复杂度：数据结构 英雄暴击问题：概率论 离散数学：三人六部门，逻辑问题 2. Extra Test lambda list comprehension,yield readlines 和 xreadlines 区别 def 语句 GIL 多线程和单线程 decorator 和 descriptor , metaclass 动态获取对象属性和设置属性 3. Conclusion 笔试基础部分：确实公式没记住，都只有模糊印象，推导又时间不够。 附加题：其实题目不难，大概1月份我爆看完 corepython 的时候大部分都是回答得上来的，还是使用不频繁，制定下目标吧， python 是肯定要看 docs ， hfpython 也赶紧看完找点状态。 多自习复习基础知识。 4. More 以为自己会点吧怎么也不至于，首次考试基本就算瞎了吧，抓紧时间学习咯！","tags":"Life","title":"Practise Makes For Success"},{"url":"pages/2015/08/22/before-semestersay-thank-you/","text":"Before semester,say Thank you 0. Recent events ss 作者(就职于知乎)最近被要求删除托管在 github 上的 ss 项目，在 ios 的 issue#124 下大家都纷纷前来感谢作者以及希望作者保重。 想说的话都被你们说完了，自强不息。 1. Comments on sth - weibo 我实在很想吐槽 weibo ，这实在是我遇见最村的验证机制，然而耐不住大家都用啊（虽然我也不互动只是看看，好歹跟上时代），所以可想而知对面的程序员是有多奇葩，那么我们开始奇葩之旅： 1.输入 weibo.com ，回车 2.提示输入用户名和密码，输入，完毕 3.弹出验证码框，输入，完毕，回车 4.提示：输入的验证码不正确（作为资深键盘侠，就不要怀疑我会打错了），重新输入，回车 5.提示：输入的验证码不正确（搞笑呢？！），重新输入，回车 6.登录成功，页面跳转 7.由于换过手机号， weibo 只有一重验证（手机号），因此在一次帐号登录异常后，使用任何链接功能受限，所以 weibo 也不能正常使用咯，因为也找不回了，真是奇葩 8.换个 weibo 号？新手机号注册，由于几乎只看无互动，被怀疑是僵尸粉，不允许登录而让我发送某某验证信息到某某号码，果然奇葩，你自己不发6位验证码我让我发一打数字的验证码你，然而我只是看看，那就不发咯 9.之后直接不上 weibo ，直接进入 d.weibo.com 看看热门消息就行了，实在想看网友都是怎么评论一件事的，忍受奇s葩b无比的三次验证码后，新标签页中打开链接一样看，页内屏蔽有什么用呢？ 真心希望以后学学 google ，如何判断是否是机器人，不要那么麻烦，珍惜大家生命，把编程当作生活艺术 2. Comments on sth - baidu 其次就吐槽下 baidu ，钱多就是霸气，妈妈问我为什么跪着敲键盘。先说说200亿砸外卖，能砸出什么呢，用户黏性就跟海浪似的，一大波在沙滩上留下一小波，不断砸钱不断的大浪冲上岸，留下的深入沙土的仍然是少数，平台那么多，人家已经成型，最后大不了家家软件都安装，给点好处就来的，并谈不上什么黏性。且看200亿是如何砸完的，期待结果中。 不得不吐槽下 tieba 了，手机浏览器上的表现是这样变化的： 1.初代：直接点入即可，帖子内容都可看，还可翻页看 2.二代：直接点入即可，帖子内容只可看首页，之后请登录 3.三代：直接点入即可，帖子内容被广告覆盖，需要 × 掉广告后，再点内容隐藏的地方，翻页内容和二代一样 4.四代：直接点入被 js 广告覆盖，没有 × 可以点，返回并不能取消广告，只能下载贴吧应用（且慢，把 js 禁止就可以继续看了） 一味强制推广确实会起到一些作用，很多人觉得也没什么就安装了，而重度用户是早就自觉安装了，但是作为一个并不常用 tieba 的人，有时只是参考一些经验却非要落个强迫安装的下场，像我这样稍微了解点计算机婴幼儿知识的人是肯定不会安装的，能点点钮就解决的事情最好不要下载等待安装点入这样操作。 3. Comments on sth - tencent 也许是对新人不放心，让新人去学习，大神那么nb的人因为天天不干活不好意思希望导师给点事做结果导师不给哈哈哈哈，我问大神拿出自己做的些东西了吗，他说没，好吧，也是低调（牛人都喜欢低调，而村炮就喜欢吹nb），大神的nb有目共睹，又说优图用的还是 opencv （这样真的好么），好好人才浪费说明制度不够弹性，让新人去学习应该给像我这种啥也不会的好吧:-p 4. Comments on me 最近 blog 写得有点频繁，虽然也学习了，但是写 blog 真是一件劳累的事呢，为了对自己写的负责往往还要继续查资料，怪不得大神经常发个 blog 就给了个图，哈哈哈哈，新学期也要开始了，除了要上课，还想系统学点东西写点东西吧， blog 就不像以前用 hexo 那样把 evernote 里的笔记都写了个遍，浪费时间且重复使用价值不大。 总之，努力吧！","tags":"Life","title":"Before Semester,Say Thank You"},{"url":"pages/2015/08/21/setup-use-ftp-server-in-ubuntu-linux/","text":"Setup && Use FTP Server in Ubuntu Linux 记录一下在学校的网速，留作纪念:-) 0. Introduction 最近由于寝室共享电影，为了避免U盘传输的麻烦，因此搭建 FTP 服务器传输电影，省了不少事，因此也记录一下 FTP是几乎所有使用 Internet 的人都会使用到的服务，本文将会用简单的几步详细介绍如何在 Ubuntu Linux 上配置 FTP 服务器，如何配置 FTP 服务器以标准模式和独立模式运行，并且对 FTP 服务器配置提供一些安全建议，本文将会使用在服务器高负载情况下仍能表现良好的轻量级且高效的 FTP 服务器 vsFTPd 。 按照惯例，本文会简单地用 vsFTPd 指代 FTPserver 。 什么是 FTP ？ FTP 代表 File Transfer Protocol ，顾名思义，这个网络协议允许你进行主机间文件或目录的传输，无论是在局域网还是 Internet 。 vsFTPd 的主要特性：虚拟 IP 配置，虚拟用户，独立模式操作， inetd(internet service daemon) 操作，强大的独立用户配置，带宽节流，单源 IP 配置，单源 IP 限制， IPv6 和通过 SSL 集成的加密支持。 1. Installation 众多类 Ubuntu 的 Linux 系统在安装 FTP 服务器时都只需要单行命令： $ sudo apt-get install vsftpd 上述命令将会安装并启动 ftp 服务器： 2. Standalone && Normal FTP mode 独立模式： vsftpd 默认以独立模式运行，在独立模式下服务器上运行的服务有叫做守护进程( daemon )的启动脚本，以 vsftpd 为例是 /etc/init.d/vsftpd ，这个独立守护进程将会在FTP服务启动的时候接管它，并为 FTP 管理者提供了一些命令以管理该 vsftpd FTP 服务器： 1. start or stop - 启动或停止 2. status - 获取当前 FTP 服务器状态信息 3. restart - 作为 stop 后 start 命令序列的替换，在 FTP 停止的状态下，该命令会启动服务 4. reload - 使得 FTP 服务器重新载入所有新配置，与 restart 的区别是不会关闭 FTP 而是使用新配置重新载入，因此不会重置运行时间 使用 service 功能以启动，重启，获取信息： $ sudo service vsftpd start 标准模式：以标准模式启动 vsftpd FTP 服务器意味着 xinetd 超服务器( superserver )将会负责 FTP 服务器的运行，因此我们需要安装 xinetd 超服务器： $ sudo apt-get install xinetd 以上命令将会安装并启动 xinetd 超服务器，然后，在 /etc/xinetd.d/ 文件夹下创建名为 vsftpd 且含有以下内容的文件： service ftp { disable = no socket_type = stream wait = no user = root server = /usr/sbin/vsftpd per_source = 5 instances = 200 no_access = 10 .1.1.10 banner_fail = /etc/vsftpd.busy log_on_success += PID HOST DURATION log_on_failure += HOST } 同时，你可以根据你的需求调整这些选项，以下是你需要注意的选项： server - 在命令行下使用 which vsftpd以获取其路径 no_access - 禁止列出的IP访问 banner_fail - 指向列出禁止访问IP的文件 然后，我们需要配置 /etc/vsftpd.conf 文件，改 listen=YES 为 listen=NO ，这将使 FTP 服务器本身不开放任何端口而把权限都交由 xinetd 超服务器管理， 注意 ，在使用 xinetd 以标准模式启动 FTP 服务器之前请确保 vsftpd 守护进程已经关闭： $ sudo service vsftpd stop 那么，我们就可以使用以下命令来以标准模式启动 FTP 服务器了： $ sudo service xinetd restart 为了确保 FTP 服务器启动了标准模式且开放了21号端口，可以使用命令： 3. Make first FTP connection 无论你是以上述哪种模式启动 FTP 服务器你都需要能够建立本地连接。 vsftpd FTP 服务器默认是允许匿名访问的，下面，我们将使用匿名用户建立连接以测试 FTP 服务器安装成功： 上述命令仅仅确保了你的 FTP 服务器在本地系统上正确装配，为了更好利用 FTP 服务器你需要用一些远程主机来测试。 4. Configuring FTP Server - Anonymous FTP access 下面我们将列出一些基本的配置选项 注意 ：当对配置进行修改了以后，务必使用 restart/reload 以应用所有更改的配置。 配置匿名 FTP 访问： vsftpd FTP 服务器默认是只允许任何匿名访问的，如果你准备这样使用 FTP 服务器，那么你可以取消访问密码以使匿名访问更加方便，最安全使用 FTP 服务器的方法是不要允许用户使用简单的文本格式验证密码，那么可以通过编辑 /etc/vsftpd.conf 以取消匿名访问的密码限制，设置 no_anon_password 为 NO ： no_anon_password=YES 5. Configuring FTP Server - Local users FTP access 现在，你的服务器将不允许除了匿名用户之外的用户访问了。那么通过设置 /etc/vsftpd.conf 中 local_enable 指令来允许所有在 /etc/passwd 文件中定义的用户登录，该选项默认是 NO ： local_enable=YES 现在在 /etc/passwd 下定义的任何用户都能使用相关密码登录： 6. Configuring FTP Server - User Access list 使用文件列出允许访问的用户来配置 vsftpd FTP 服务器，通常，你可以在 /etc 目录定义这样的文件，它可以是任意文件名，你只需要在这个文件中列出所有可以访问的用户名即可，那么举个例子吧： $ echo sennhviwang > /etc/vsftpd.userlist 然后，就在 /etc/vsftpd.conf 文件中定义上述创建的文件并且使其有效： userlist_file = /etc/vsftpd.userlist userlist_enable = YES userlist_deny = NO 如果只想要该文件中列出的用户可以访问，设置 userlist_deny 选项为 NO ，该文件的格式是每行一个用户名。 7. Configuring FTP Server - Changing default port number 通常，任何 FTP 服务器按照标准都使用21号端口提供用户验证，20号端口作为数据传输。 vsftpd FTP 服务器也不例外，如果需要改变监听端口，更改 /etc/vsftpd.conf 配置文件中 listen_port 选项即可，如 listen_port=2222 ,别忘了要重启 FTP 服务器哦！ 然而，这仅仅在独立模式下是有用的，如果你使用 xinetd 超服务器在标准模式下运行 FTP 服务，则需要修改 /etc/services 文件且重启 xinetd ： $ sudo service xinetd restart 8. Configuring FTP Server - Other Configuration Options vsftpd 服务器有许多配置选项可以满足你的需求，在此我们列出值得关注的一些： 1. max_clients - 设置同时使用 FTP 服务的最大用户数， 0 代表不限制 2. max_per_ip - 设置来自同一 IP 地址的最大用户数 3. download_enable - 设置是否允许下载 vsftpd 有大约125项配置，在此不具体罗列，等待你的发掘:-) 9. How to connect to FTP with a web browser 用法： ftp://YourFtpUser:YourFtpUserPassword@yourdomain.com 9. More ... 1. How to setup and use FTP - LinuxConfig 2. Linux FTP setup - aliyun 3. Using FTP - Howtos 4. How to connect to FTP with a web browser - siteground","tags":"Linux","title":"Setup && Use Ftp Server In Ubuntu Linux"},{"url":"pages/2015/08/20/disaster-recovery-record/","text":"灾难恢复记录 0. Why we need disaster recovery? 首先，解释下什么是 disaster ：对能够给人类和人类赖以生存的环境造成破坏性影响的事物总称。当我们执行的操作破坏了现有的稳定或者平衡的时候，便发生了人为灾难。最近，由于操作不当，致使 /etc 下某些文件损坏，造成了不可挽回的灾难，因此需要执行灾难恢复操作，也有了这篇恢复记录，以节省更多恢复的时间。 1. Typist 出于备份考虑，系统安装的时候系统挂载在 \"/\" (根目录)下，用户文件挂载在 /home 分区下，这样每次安装系统（强烈建议最好不要总折腾浪费时间的安装系统，能恢复备份更好）时 home 分区并不需要被重写，只需要重新安装OS即可，恢复的事情就变成了安装一打软件的打字任务： 在更改了合适的 source 后(例如我使用 jlu 的镜像源，因此需要更改 /etc/apt/sources.list.d/official-package-repositories.list 文件)，开始打字 ... 安装常用软件: $ sudo apt-get -y install autojump # 文件夹间快速跳转，折腾pelican必备 $ sudo apt-get -y install yakuake # 要挂科，快速访问模拟终端 $ sudo apt-get -y install dropbox skype wine $ sudo apt-get -y install ipython ipython-notebook python-pip # 必装 $ sudo pip install pelican markdown scipy scikit-learn pandas $ sudo apt-get -y install retext retext-wpgen python3-docutils python3-markdown # python3*是retext使用live preview需要的模块。 # 另外需要手动安装 google-chrome (非chromium-browser)，IntelliJ IDEA Reference: retext sf 2. IntelliJ Idea Related IntelliJ IDEA 解压后执行 idea.sh 报错: JDK Required: 'tools.jar' seems to be not in IDEA classpath. Please ensure JAVA_HOME points to JDK rather than JRE. 解决办法:安装 jdk $ sudo apt-get update $ sudo apt-get install openjdk-7-jdk IntelliJ IDEA 创建快捷方式:进入 idea --> Tools --> Create Desktop Entry/Create Command Line Launcher 。 3. Shadowsocks Related 通过 PPA 源安装 shadowsocks ，仅支持 Ubuntu14.04 或更高版本。 $ sudo add-apt-repository ppa:hzwhuang/ss-qt5 $ sudo apt-get update $ sudo apt-get install shadowsocks-qt5 4. fcitx Related 安装 fcitx $ sudo add-apt-repository ppa:fcitx-team/nightly $ sudo apt-get update $ sudo apt-get install fcitx im-switch $ im-switch -s fcitx $ sudo apt-get install fcitx-frontend-qt4 $ sudo apt-get install qt4-qtconfig fcitx-table-all fcitx-googlepinyin 之后，运行 qtconfig-qt 4后在 interface 栏中选择 fcitx . 运行 fcitx -r 报错: no usable user interface ，没有用户界面，那么安装： sudo apt-get install fcitx-ui-classic fcitx-ui-qimpanel fcitx-config-common fcitx-frontend-qt4 fcitx-googlepinyin fcitx-module-dbus fcitx-modules fcitx-module-X11 kde-config-fcitx 之后，运行 fcitx -r 警告: fcitx -r :(WARN-16299 /build/buildd/fcitx-4.2.8.5/src/frontend/xim/xim.c:161) Please set XMODIFIERS .可以无视，然而由于输入法只能在 kde 应用如 konsole 下使用，并不能在一些 gtk 应用下使用，因此，可以卸载 fcitx-frontend-gtk2 fcitx-frontend-gtk3 后重装发现在一般 gtk 应用如 gedit 上可以使用，而 chrome 下仍然不能使用，这时需要注销后重新登录。 Reference: fcitx kde diagnostic 关于 fcitx 安装更多细节请参考 英文Wiki 和 中文ArchWiki ，个人经验，有时无论你怎么百度怎么 google 都不如直接看 Official manual 有效且快速。 5. Pelican Related - first Step 在安装了 pelican (注意，使用 apt-get 和 pip 安装的 pelican 版本是不一样的，可能会导致你需要的特性找不到，个人推荐使用 pip 安装)之后，便进入了自己 blog 目录，使用命令 make html (具体定义参见 Makefile 文件)后报错： No module named html 提示在处理 ipynb 的时候发现 python 模块并没有被安装，因此重新安装 pelican-plugins 相应插件， ipynb 需要插件 liquid_tags ，参考文档重新安装，需要 pip install ipython==2.4.1 ，之后继续 make html ，依然报错： Pandoc wasn't found 提示去 Pandoc 官方网站安装，由于使用 Linux 64-bit Debian/Ubuntu 系，因此前往 github 下载 .deb 文件安装即可。 此时没有 Error 而有 UserWarning ， nodejs 没有安装，因此 apt-get install nodejs 即可。 类似问题往往只是需要你查看报错信息，检查系统完整性，然后根据信息安装缺少依赖就解决了，因此默认英语较好或像我这样英语不好耐心学习英语。 Reference: ipynb 6. Pelican Related - TBD 这个问题属于 TBD ，在使用 ipynb 相关模块后，会使得每个页面头部被暴力地加上 _nb_header.html ，这会在每次 make html 的时候产生很大的处理工作量，因此 pelican 提供了擦车功能-- cache ，在 cache 目录下的文件是 make 后生成的缓存文件，根据每次 make 时 content 的改变决定是否更新 cache ，这样如同 git 提交时会比较两个版本配置文件，如果存在差别则重写 cache ，如果相同则修改 content 部分即可。 由于发现每次 make 使用时间过长(约150s)，因此根据 pelican文档 ，因此指定 cache 文件夹： 再次 make 时间缩减为5s，但是并没有像以往一样生成 cache 文件夹且目录下含有俩个文件，因此目前只能猜测pelican进行的更新修改了目录结构， cache 功能需要指定开启。 7. Pelican Related - Theme 由于之前在 github 上备份了 output 文件夹(即博客)和主题文件夹，因此恢复配置也相对方便，然而由于并没有及时同步，一些后期修改的配置依然失去了，只能手动恢复，不得不进入主题目录修改： 1. base.html ：在 <head> 内添加 EXTRA_HEADER 和 GOOGLE_ANALYTICS_ID ，在 <body> 内添加 Fork GITHUB 并设置 src ，在 <ul class=\"columns\"> 内设置 Pages ，在 <footer id=\"credits\" class=\"row\"> 的 <div> 内添加 FOOTER 2. sidebar.html 修改头像外部链接为内部链接，增加 SOCIAL 和 LINKS 内容 3. style.css 增加 .avatar { border-radius: 50%; width: 186px;} 使 sidebar 头像为圆形 4. gumby.css 增加样式内容以加入链接图标，其余按之前优化保持不变 至此，恢复阶段的恢复和优化工作结束:-) 8. More ... 1. pelican docs 2. pelican-theme 3. pelican-plugins 4. liquid-tags plugin for ipynb 5. personal theme 6. fcitx kde diagnostic 7. reference for ipynb 8. retext sf","tags":"Event","title":"Disaster Recovery Record"},{"url":"pages/2015/08/19/oneplus-one-zhe-teng-ji-lu/","text":"一加1(A0001)折腾记录 0. Abstract 自从四年前使用CM 7 for Moto Defy Android v2.7.6后，便深深被CM系列所吸引，随着科技的进步，Defy的性能已经远远落后，渐渐也出现了\"不支持\"的应用，作者深深感受到被世界潮流的抛弃感，之后便使用了\"老人机\"系列如联想A380,华为Y320,酷派大神F1,加起来浪费的钱都快够买现在使用的一加1了，而忍受过\"国产定制\"\"应用市场\"\"虚假root\"等一系列强迫定制后，感受到对CM的日益怀念，又获知一加官方支持刷CM系统，于是在7月17日入手了一台，首先感谢财政支持！ 1. Butterfly effect 新机到手，立马刷入 CM12.1 [ 下载地址 ]，当然选择最新的，刷入后便迫不及待开始熟悉Android5.0.2，然而发现信号栏会出现让强迫症抓狂的感叹号，如图 尝试论坛各种\"教程\"之后发现刷入CM12.1的Recovery(后称re)并不能用，这意味这什么呢，意味这re作为管理员只认识自己认识的人允许其进入手机(如更新，安装软件等），而不会接受re其他家庭的管理员认识的人进入手机，听起来很安全啊，那么这有什么问题呢？问题出在re自己认识的人太少，大家都说支持，你说不支持，那咋办，就把自己自闭了呗。 而解决感叹号问题，需要让这个版本re像其他版本re一样认识很多人，虚心升级自我。现实是糟糕的，re不仅自闭，还拒绝学习其他同行的知识(不可更新re为第三方re)。 因为觉得折腾，而既然手机可以正常使用，那么最好时间花在其他地方吧。 某天，就此跟大神交流才知道这极有可能是版本问题，大神使用手机版本为CM11s且一直拒绝更新，同时大神把我感叹号鄙视了一通，这便让我下定决心把感叹号灭掉。 2. First Attempt 根据 论坛方法 ，发现自己手机并没有Root授权(Root Access)，而在设置里搜索\"Root\"却会出现该项，点不进去，实在奇葩无比，于是考虑应该需要Root授权才能灭掉感叹号了。 Root授权获取方式有很多，大致分为俩种：其一在ROM包中集成，安装Android系统便会自带Root(需要按一定步骤开启才可使用)，其二是系统上升级，升级方式可以是使用Root包通过re输入(管理员学习先进知识)，也可以是通过软件刷入如\"刷机精灵\"\"root大师\"等。 由此可见，首选第一种，第二种中首选Root压缩包通过re升级，最后再去求助各种大师，而根据经验来看，前面方法不行，大师往往也并没有什么用。 由于是First Attempt，因此我并没有选择ROM包集成Root授权，而在re不能使用的情况下，只能求助大师们，绝大多数的大师都是\"大师\"，其中KingRoot让手机刷入了自家的\"Root权限管理\"，其实是假Root，当然应付管理所有应用权限这种活King大师可以轻松处理，而修改状态栏感叹号这种任务下King大师依然还是\"大师\"。 3. Second Attempt [ Note ]乱刷ROM会导致各种状况，如：手机卡在logo界面;卡在re界面，手机黑屏只能进入fastboot模式不能进入re等等。 解释下 Fastboot :Fastboot是可以用来刷写设备分区(刷写Android设备文件系统，是除Recovery模式外在安卓系统上进行安装或者更新操作另一种模式。 而一旦手机不能正常进入系统，且re处于\"无力学习\"的情况，那么就需要对设备刷写新ROM的文件系统，这时可以使用临时的re也可以使用fastboot模式刷入ROM，而手机CM12.1每当在\"一加万能工具箱\"重写过程中，并不能重启后进入临时re（刷写re失败），于是只能求助fastboot模式。 先放上最后多次实验得出 最实用的update线刷方法 [链接: http://pan.baidu.com/s/1sjwZKbN 密码: ygtd]，以及简单介绍最有效update线刷方法[链接: http://pan.baidu.com/s/1mg1TFSW 密码: bcpe]。 update线刷方法： 1.手机关机后同时按住\"音量+\"和\"电源\"键即可进入fastboot mode 2.手机数据线连上电脑，运行\"update线刷包\"，解锁确认后，执行update线刷 3.选择需要升级的ROM包（也可以是第三方re包如twrp，root包） 4.等待刷写设备 掌握这种方法之后刷成砖也不用怕也不需要麻烦一加客服远程刷机浪费时间了～ 4. First Strike 成功刷入中意的系统（如CM11s,CM12.1-nightly）后，个人由于对CM12.1系统的re不抱希望（其实nightly版本还是不错的）， 强烈建议 刷如第三方re如TWRP，使用\"update线刷\"方法可以update系统自带re，刷入TWRP后可以顺便把你可能需要的\"联通破解包\"\"SuperSU包\"之类在首次双清后刷入系统，这样进入系统的时候你会发现如果你刷如了SuperSu包会多出一个\"授权管理\"类的系统应用（例如叫做\"超级授权\"），这个应用和之前提到的KingRoot是不同的，它接管了打开系统\"Root Access\"之后的权限管理任务，而KingRoot并没有接管系统权限的资格。 一旦开启Root授权，便可以使用前文提到的取消感叹号的方法取消联网状态下感叹号， 原理 ：当设备连接互联网的时候，系统会检查能否连接google服务器，如果失败，在Android 5下就会在wifi图标或信号图标下有感叹号。对服务器认证设置修改，同样使用该原理的还有小狐狸Portal Server可以自定义认证服务器，虽然我并没有使用成功（毕竟我们有谜之walled garden） 5. Second Strike 在尝试了CM11s后，感叹号问题完全消失（无论联网还是断网），然而突然发现新的问题：手机RAM实际上应该是3G（2867MB），而上图显示只有1867M（正好相隔1G），莫名奇妙没了1GRAM肯定会很郁闷的，而CM12.1并没有这种问题，之后发现还有些人是这种情况，6月26日出厂的部分会有这种情况，那么来做个运算吧：3 * 0.93 = 2.79，2 * 0.93 = 1.86。 而从之后的使用来看，大家都认为手里的是烂尾机，所谓3G内存情况下的发热情况比2G内存情况还要严重，（似乎说明虚拟就是虚拟的，官方也并没有给出建设性的解决方案，让我对一加从此失望，说好的不将就，最终还是这副德性）。 没办法，CM11s虽然比CM12s好用多了，2G实在看着不舒服，而30天换货已经过了，所以只能按照文首通过TWRP刷入了CM12.1-nightly，每天更新虽然麻烦，但是可以无视，而且也使如果系统含有BUG手上就有可能的解决方案。 6. In honor of those days 为了纪念这些天的折腾， 7. More ... 1. FastBoot Mode解释 2. 刷入CM12.1方法 3. 去感叹号方法 4. 感叹号原理 5. 最实用的update线刷方法","tags":"Event","title":"Oneplus One 折腾记录"},{"url":"pages/2015/08/16/restart/","text":"说说最近 1. 发生的一些事 天津塘沽物流爆炸事件，如果人与人之间多一些友善，对生命（不是某个个体）怀有敬畏，且热爱生命，就不会有这些因为利欲熏心而发生的事了。 真的不能没有底线。 消防员也是人，让他们去拿生命危险减少那些利益既得者犯下错误所带来的损失，这种感觉很悲凉。 是啊，你能从这件事情里看到任何你想看到的道理。 英雄不灭，我辈自强。 2. 自己做了啥 Part I 好多书想看，感觉啥也不会。 新手机oneplus1到手后就刷了cm12，由于某些大家都知道的原因，谷歌认证服务器失败会导致信号栏旁有感叹号。用了几十天，强迫症犯了，不将就嘛，灭掉它。 （此处省略一万字，有时间再写:-)，现在还是多多学习～） 折腾了三天，弄懂了很多事情，rec是什么，twrp是什么，版本存在哪些bug，自己的手机可能还是个烂尾机，最后就尽可能让它工作啦～ Part II openWRT，简单说吧，都是泪。大杰懒得指导我，伤心。。。 目前明白一些东西，但是并没有什么用，说说总结出来的奇葩死逻辑： 需要安装软件-->需要opkg update-->需要联网-->需要写入drcom-->需要python环境-->需要足够空间-->需要usb挂载-->需要update安装软件--... 就是这么奇葩的逻辑，于是我试图在每一个依赖（硬件弄不了，优先不想拆路由，连刷op都是保守刷，如果成砖了又需要弄ttl线就会拖延时间了）中插入其余条件以使得这个死循环被破解，结果也知道了，都是泪。 （此处省略一万字，下次有时间弄好了写下来） 同时也研究研究大杰的drcom 大杰那啥交流群，果然还是木有好心人指导我，更情愿浪费时间吹吹牛交流感情哈哈哈哈。 3. 接下来的规划 op的折腾确实让我更加重视基础科学知识了，不管是配置无线还是dns，都是书上知识，缺乏实践。 所以接下来回归书本，重视实践时探索原理。 上了很多天网查了很多天资料了，脖子酸了手臂累了，出去自习和锻炼吧～ 4. More 跟室友聊天，他问我弄啥，我说op啊，当说起连线这种基础问题时，他说PC连router是console口，我还耐心地解释说LAN口，console口是网络实验课交换机上的，可以配置端口汇聚镜像啥的，他依然坚持自己说的，并且加了一句，那门实验课我89分呢。 。。。。 然后我就无语了，我都已经ssh上router了就说明LAN是对的，再说我这小路由并没有console口啊哈哈哈哈（算了都是内心活动） 今天聊天少年说自己C盘还有20G怕放不了什么东西了（意思啥都会放C盘），我说我C盘70G都塞满过（其实我是安装软件太多）后来重装系统了世界就清净了～少年说咋重装的（内心活动：你不是计算机学院的么。。。）我说自己拿工具烧写个u盘启动盘就行啦，他：哪来的镜像，我说下的啊，他：那不是有很多广告吗，我：我没用过有广告的。。。他：听起来好高端，我（内心活动：这种高端的活也只能拿来骗骗小朋友啊唉。。。我还是好好学习争取有个公司能让我搬个砖啥的） 虽然我很水，大杰大神都不愿意指导我。。。 但是，加油吧！","tags":"Life","title":"Restart"},{"url":"pages/2015/07/16/ceil-in-c-mathh/","text":"1. 提出问题 最近翻阅 《Linux C 一站式学习》 时遇到一个基础数学问题，摘录如下： 假设变量 x 和 n 是两个正整数，我们知道 x/n 这个表达式的结果要取 floor ，例如x是17， n 是4，则结果是4。如果希望结果取 ceiling 应该怎么写表达式呢？例如 x 是17， n 是4，则结果是5； x 是16， n 是4，则结果是4。 2. 问题转换/简化 不要着急借助搜索引擎，其实这道习题需要考虑如何对表达式结果取天棚( ceiling )，我们知道C语言中除法\"/\"默认取的是地板( floor )，那么就有几种思考方式： 1)对于形如 x/n 这样通过表达式结果来求天棚( ceiling )： 演化1：将一长为 x 的绳子以长度 n 为间隔打结，打结完毕后如发现有不足长度 n 的段（已有结点 k 个），补上其长度以完成最后一个结（结点个数为 k+1 ）。 演化2：由于长度 n 固定，因此另外准备一条长度 n 的线段，以取代打结完毕后发现长度不足 n 的段。 演化3：计算机做简单数值运算时，由于除法取地板，那么将单独准备的一条线段 m 直接添加在原线段上，并使得其值无限接近于 n ，这样并不会由于添加线段长度为 n 的段而使得 k 在不需要 +1 的情况（ x/n 已为整数）下 +1 ,且可使得长度不足 n 的段在补足后必然大于 n ，进而 k+1 。 2)对于形如y这样通过值求天棚( ceiling )： 演化1：坐标轴上的点不属于整数的点取天棚总是向坐标轴正半轴方向靠拢。 演化2：采用形如 x/n 方法，则m=0.9999...，可求解 3. 求解问题 1)对于形如 x/n 这样的表达式结果求天棚( ceiling )： 解得： (x+n-1)/n 设： x=kn+b，b∈(0, n)且b∈Z 当 b=0 时， (x+z)/n=k ，即 (kn+z)/n=k ， z 最大为 n-1 ； 当 b≠0 时， (x+z)/n=k+1 ，即 (kn+b+z)/n=k+1 => (b+z)/n=1 由 b∈(0, n)且b∈Z ，故 b 可取最小值 1 ，此时 z 为 n-1 当 b 取 2 时， z 为 n-2 ... 当 b=n-1 时， z=1 ，可见不考虑特殊情况时， z 最大为 n-1 而当 b=n-1 时， z 若为 n-1 ，则 (b+z)/n=2-2/n<2 => (kn+b+z)/n<k+2 ，依然可以取 ceiling 所以无论怎样 z 都可为 n-1 ，即 z=n-1 。 2)对于形如y这样通过值求天棚( ceiling )： 舍入方向-- fegetround,fesetround 取整模式-- rint #include <math.h> #include <fenv.h> #pragma STDC FENV_ACCESS ON // 设置该参数表示可以访问浮点运算异常的状态值 double ceil ( double x ) { double result ; int save_round = fegetround (); // 获得当前的舍入方向，表示为一个舍入方向宏值 fesetround ( FE_UPWARD ); // FE_UPWARD：向正无穷大(+Inf)舍入 result = rint ( x ); // or nearbyint fesetround ( save_round ); // 设置舍入方向，成功时返回0 return result ; } 测试函数： #include <math.h> #include <stdio.h> int main ( void ) { printf ( \"ceil(+2.4) = %+.1f \\n \" , ceil ( 2.4 )); printf ( \"ceil(-2.4) = %+.1f \\n \" , ceil ( - 2.4 )); printf ( \"ceil(-0.0) = %+.1f \\n \" , ceil ( - 0.0 )); printf ( \"ceil(-Inf) = %+f \\n \" , ceil ( - INFINITY )); } 运行结果： ceil ( + 2.4 ) = + 3.0 ceil ( - 2.4 ) = - 2.0 ceil ( - 0.0 ) = - 0.0 ceil ( - Inf ) = - inf 4. 其他实现 1.来自 Stackoverflow #define CEILING_POS(X) ((X-(int)(X)) > 0 ? (int)(X+1) : (int)(X)) #define CEILING_NEG(X) ((X-(int)(X)) < 0 ? (int)(X-1) : (int)(X)) #define CEILING(X) ( ((X) > 0) ? CEILING_POS(X) : CEILING_NEG(X)) 然而这个实现并不是正确的， ceiling(x) = ceil x is the smallest integer not less than x .[ wiki ]， int() 强制类型转换使得尾数(mantissa)部分被丢去，例如 int(-2.5)==-2 ，正是对负数取天棚需要的，而使用三元操作符 (?:) 是为了判断 =0 和 ≠0 的两种关系。 因此，这个答案应该修正为： #define CEILING_POS(X) ((X-(int)(X)) > 0 ? (int)(X+1) : (int)(X)) #define CEILING_NEG(X) (int)(x) #define CEILING(X) ( ((X) > 0) ? CEILING_POS(X) : CEILING_NEG(X)) 2.来自 Linux Question Org #define CEILING(x) (int)(x) + (1 - (int)( (int)((x) + 1) - (x) )) 对于一般的数测试没有问题， (1 - (int)( (int)((x) + 1) - (x) )) 实质是利用判断是否含有尾数部分决定对正负数的 int(x) 是否 +1 ，分三种情况讨论： 1)正数 含有尾数： (1 - (int)( (int)((x) + 1) - (x) ))≡1 不含尾数： (1 - (int)( (int)((x) + 1) - (x) ))≡0 2)负数 含有尾数： (1 - (int)( (int)((x) + 1) - (x) ))≡0 不含尾数： (1 - (int)( (int)((x) + 1) - (x) ))≡0 3)零 (1 - (int)( (int)((x) + 1) - (x) ))≡0 ,不会改变结果 然而，他们并不准备处理超出 int 范围的数（例如1e15)，因此，仍然推荐使用 ceil in math.h ，当然，更大范围的数（例如1e20）则ceil可能失效，此时进位1已经会被无视了:-) 5. More ... 尽信书，则不如无书 有一个种说法，编程=google+stackoverflow，然而一味复制粘贴不仅不能学到知识，反而可能引入不负责任的bug，即使是有\"vote up\"的解答，也不一定是对的 当然，吸收不同的意见，以不同的视角看问题，也会收获颇丰","tags":"C/c++","title":"ceil in C-math.h"},{"url":"pages/2015/07/11/shi-yong-aws-ec2da-jian-shadowsocksfu-wu-qi/","text":"1. Why shadowsocks shadowsocks类似goagent，是一种快速隧道代理，帮助你绕过防火墙。shadowsocks需要使用自己的服务器，当然选择不同价格的服务器决定了服务的质量:-) 优点： 可以免费：shadowsocks可以利用免费的Aws EC2，公有服务器还是不考虑吧，毕竟时间更宝贵。 表现稳定：有过使用goagent的经验，经常会丢包 速度较快：还是那句话，一分钱一分货 多平台支持：感谢开源，无论Linux，win*，MacOS，iOS，Android平台均可以安装shadowsocks客户端 2. Sign up 注册AWS账号，需要信用卡（由于某宝的存在，虚拟信用卡果然变得容易获得了呢:-)) 进入 aws主页 ，按照提示完成注册，然后需要进一步通过手机验证 \"Identity Verification by Telephone\" ，输入电话号码后点击 \"call me now\" ，稍后Amazon便会有电话拨来，按照提示在电话上输入屏幕上的 \"Your PIN：\" 给出的四个数字即可。 之后选择 Amazon Support Plan ，这里选择 Basic（Free） ，注册成功后会进入欢迎界面，选择 \"启动Aws管理控制台\" 。 3. Launch and set up AWS EC2 1.选择 region 部署区域，不同区域感受不同，这里不作建议，选择区域完毕后创建实例，如下图： 2.选择一个 Amazon系统映像 (AMI)，这里选择 \"Ubuntu Server 14.04 LTS\" ，如下图： 3.选择一个 实例类型 ，由于是免费版本，所以只能选用 t2.micro ，如下图： 4.选择后点击 \"下一步：配置实例详细信息\" ，此处默认配置即可 5.继续点击 \"下一步：添加存储\" ，此处默认配置即可，也不要超过30G 6.继续点击 \"下一步：标签实例\" ，此处默认配置即可 7.点击 \"配置安全组\" ，此处添加规则，如 ssh ，具体配置规则自己定义，然后点击 \"审核和启动\" 8.核查实例完毕后点击 \"启动\" ，即弹出 \"选择现有密钥对或创建新密钥对\" ，选择 \"创建新密钥对\" ，然后在 \"密钥对名称\" 栏输入密钥对文件名，就可以下载属于你的 *.pem 密钥文件了。 9. [注意] 一定要将密钥文件存储在一个可访问的安全位置，创建文件后将不能再次下载！若遗失则可以删除之前的 key pairs 并创建新的，如果希望使用自己的 ssh key , 也可以选择 \"Import Key Pair\" 10.下载密钥文件完毕后点击 \"启动实例\" ， 在本地机器上，将 .pem 文件移动到 ~/.ssh 目录下（如果目录不存在则创建），并更改其权限为600（即 rw------- ）： $ mv ~/PATH_TO_FILE/test.pem ~/.ssh/ && chmod 600 ~/.ssh/test.pem 11.使用 ssh 登录 AWS EC2实例 ，由于使用的是 Ubuntu server ，所以登录名为 ubuntu ， public.ip 为 [AWS控制台-描述-公有ip/公有DNS] 。如果登录出现问题，在命令后添加 -v 参数，以查看debug信息 $ ssh -i ~/.ssh/test.pem ubuntu@public.ip 12.到此，就完成了配置和启动AWS EC2的过程 4. Install shadowsocks on AWS EC2 1.在服务器端，安装 shadowsocks ，参考 官方文档 和 Github ， Ubuntu server 示例： $ apt-get install python-pip && pip install shadowsocks 2.临时开启 shadowsocks 服务, -p 指定端口， -k 指定密码（password为密码）， -m 指定加密方式（常用aes-256-cfb） $ ssserver -p 80 -k password -m aes-256-cfb 3.后台运行 shadowsocks 服务： $ sudo ssserver -p 443 -k password -m aes-256-cfb -d start 4.停止 shadowsocks 服务： $ sudo ssserver -d stop 5.查看日志： $ sudo less /var/log/shadowsocks.log 6.也可以通过配置 /etc/shadowsocks.json 文件来实现，具体定义见 文档 5. Surf the Internet 1.服务器端 shadowsocks 已经配置并且在后台运行，此时便可以通过在各种平台上安装 shadowsocks客户端 来实现上网，例如linux平台安装 shadowsocks-qt5 ，对于Ubuntu平台： $ sudo add-apt-repository ppa:hzwhuang/ss-qt5 $ sudo apt-get update $ sudo apt-get install shadowsocks-qt5 2.linux上配置 shadowsocks 客户端 3.浏览器安装 SwitchyOmega ，并配置profile： 6. More ... 体验了免费的AWS EC2服务，还是很期待体验使用付费流量的:-)","tags":"Event","title":"使用Aws Ec2搭建Shadowsocks服务器"},{"url":"pages/2015/07/11/shi-yong-pelicanhe-github-pagesda-jian-bo-ke/","text":"1. Why Pelican? 之前用过 hexo + github pages 搭建个人博客，虽然hexo官网是支持linux及实现的，但是本人折腾几次hexo并不能将目录初始化，因此用了很长一段时间的windows来写博客。随着对linux环境的使用产生习惯性依赖（因为windows基本被用来打游戏:-))，因此一直在寻找一个在linux平台下的替代品,直到发现了 pelican 。 因此，本文是基于Debian/Ubuntu系Linux操作系统的:-) 2. Before start,you need some stuff ... 搭建过程中会使用或涉及以下知识或工具，如果对于写代码感到困惑，也没关系——你既可以选择使用固定模板搭建博客框架，自己负责创作,也可以选择修改或创建模板。 对于有兴趣发现更多特性的朋友，可以耐心参看官方文档，往往比\"百度一下\"要快哦:-),当然建议使用Google,毕竟结果会不同(梗),如果被墙了，请参看另一篇文章 使用Aws EC2搭建shadowsocks服务器 。 github git github pages python pip pelican retext markdown $ apt-get install git $ apt-get install python-pip # 建议参考官方文档安装 $ pip install pelican $ apt-get install retext $ pip install markdown 3. Let's start! 首先创建一个属于个人博客的文件夹，例如： $ cd # 先确保你会在用户主目录 $ mkdir -p sites/blog/endergeek && cd $_ # 创建文件夹endergeek并进入文件夹 $ pelican-quickstart # 进入pelican配置并依据配置初始化当前文件夹 效果如下图： 执行完毕后，文件夹结构如下图： 文件作用解释如下： content ：存放markdown或rst博客文章源文件，以及之后可选择创建的文件夹images,pages,notebooks等（notebooks需要启用插件 liquid_tags.notebook ，images文件夹存放所有博客文件中引用到的图片，pages文件夹存放自己创建的静态页面） output ：执行make html命令后生成的静态博客 develop_server.sh ：本地测试服务器，地址 http://localhost:8000/ Makefile ：管理博客的makefile文件，定义了一系列make的参数行为 pelicanconf.py ：博客配置文件 publishconf.py ：发布文件，非必需 cache ： 缓存文件，可删除，删除后需要使用make html以重新生成。注意，删除cache文件夹内容可能导致自定义的样式被修改等问题 4. Write something ... 在content文件夹内创建一个 [filename] .md文件，并对其进行编辑。 博文格式如下图： 你也可以根据 官方文档 更完整定义你的markdown文件头，为了避免每次新建markdown文件要重复安排md文件头，因此就写 一个简单的python脚本 以生成md文件，使用方法如下图： 5. Make! 创作完毕后，回到endergeek文件夹（即content文件夹的父文件夹），执行命令： $ make html # make命令具体细节在Makefile中定义 如下图： make html 会按照配置文件将博文生成静态网页文件存放output文件夹中，使用 make serve 查看： 在浏览器中输入 http://localhost:8000/ 查看 6. Choose your favourite theme 在博客主目录（即endergeek文件夹）下，使用git下载 pelican主题 仓库到本地，主题预览网址 pelicanthemes ： $ git clone https://github.com/getpelican/pelican-themes.git 打开并编辑pelicanconf.py配置文件，更改或添加THEME为主题名称： THEME = 'pelican-themes/gum' ，具体配置设置参考 官方文档 7. Enable Disqus 在Disqus申请账号，创建并使用站点的Shortname，获取自己应用的Secret Key和Public Key并写入pelicanconf.py配置文件中： 8. Publish blog 发布博文，使用github pages作为站点服务器，参考 官方教程 简单几步即可，这样，你就获得一个github.io的二级域名以及建立了一个网站文件版本库，也可以使用自己的域名重定向到 [username] .github.io二级域名这样就可以通过访问你的个人域名访问你的博客了。 进入博客主目录(endergeek)下的output文件夹，执行如下命令（命令解释可以在另一篇 Git博文 找到： $ git init $ git add . $ git remote add origin https://github.com/ [ username ] / [ username ] .github.io $ git pull origin master $ git commit -m \"first blog\" $ git push origin master 发布的命令较长，可以修改Makefile文件如下图： 之后就可以在每次编辑完新的文章后，在主目录下使用 $ make html $ make github 来更新你的博客了～ 9. More ... 博客主题 地址","tags":"Event","title":"使用Pelican和Github Pages搭建博客"},{"url":"pages/2015/06/15/some-tips-on-it-learning/","text":"给编程初学者的一些建议 对编程初学者来说，或者对仍在大学接受高等教育，即将成为编程工作者的人来说，IT界的技术风潮是不可追赶的。很多人扔掉大学计算机基础课程的课本，而去购买许多看起来很高上大的\"编程宝典\"，我不想说这些装逼，也许是个人的学习方式不同，我只是觉得如果他们把追赶这些时髦技术的时间多花一点在基础的课程上应该是可以走得更远的。 计算机技术不等于编程技术 很多人把我们学计算机的当成是修电脑的，很多计算机专业的人对此非常反感。也有人把我们学计算机的当成是写程序的，这难道就对了么？很多在校的学生就会这么认为，认为学计算机就是学编程，计算机专业就是编程专业，也只上和编程有关的课程，其他和编程关系不大的计算机基础课程统统不管，这令我非常诧异。 其实编程只是计算机技术应用过程中一种复杂性最低的劳动，这就是为什么IT业最底层的人是程序员（CODER）。计算机技术包括了多媒体，计算机网络，人工智能，模式识别，管理信息系统等等这些方面。编程工作只是在这些具体技术在理论研究或者工程实践的过程中表达算法的过程。编程的人不一定对计算机技术的了解就一定很高。而一个有趣的现象是，不少大师级的计算机技术研究者是不懂编程的。网上的炒作和现实中良好的工作待遇把编程这种劳动神秘化了。其实每一个程序员心里都明白，自己这些东西，学的时候并不比其它专业难，所以自然也不会高档到哪里去。 死记硬背，没有灵活应用 我见过一本女生的《计算机网络原理》教材，这个女生像小学生一样在书上划满了横杠杠，笔记做得满满的，打印出来一定比教材还厚。我不明白的是，像计算机网络原理这样的课程有必要做笔记？我们的应试教育的确害了不少学生，在上《原理》这一类课程的时候许多学生像学《马列原理》一样逐字背诵记忆。这乃是我见过的最愚蠢的行为。所谓《原理》，即是需要掌握它为什么这样做，学习why，而不是how（怎样做）。极端认真的学生背下以太网的网线最大长度，数据帧的长度，每个字段的意义，IP报头的格式等等，但是忘了路由的原则，忘了TCP/IP协议设计的宗旨。总之许多人花了大量的时间把书背得滚瓜烂熟却等于什么也没学。 对于编程语言的学习也一样，这里拿C++举例，很多学生都死扣C++语法的细节不放，看了很多C++教程，甚至是在网上也学习很多关于C++语法的课程。但是在写程序的时候突然发现又忘记了这些语法，然后再继续去翻书，这种场景各位应该不少遇到吧。有个师弟就跟我说：\"C++ 太难了，学了这里忘了那里，学了继承忘了模板。\"我的回答道：\"你不去学就容易了\"。我并没有教坏他，只是告诉他，死抠C++的语法就和孔已己炫耀茴香豆的茴字有几种写法一样毫无意义。你根本不需要对的C++语法太关心，动手编程就是了，有不记得的地方一查MSDN就立马搞定。我有个结论就是，实际的开发过程中对程序语法的了解是最微不足道的知识。这是为什么我在为同学用Basic（我以前从没有学过它）写一个小程序的时候，只花了半个小时看了看语法，然后再用半个小时完成了程序，而一个小时后我又完全忘记了Basic 的所有关键字。 基础没学好，乱赶技术时髦 这是我想说的重点，大多数人都希望自己写的应用或者网站能尽快上线，然后赚很多白花花的银子，这也无可厚非，毕竟我们的代码总是需要有商业价值。但是，我觉得这种想法对那些已经真正进入软件行业的人来说是合理的，但是对大部分（注意我说的是大部分，在校创业的也有一部分）在校的准程序员来说，这种想法是要不得的，一个并未进入到行业竞争中来的初学者最大的资本便是他有足够的时间沉下心来学习基础性的东西，学习why 而不是how。时髦的技术往往容易掌握，而且越来越容易掌握，这是商业利益的驱使，为了最大化的降低软件开发的成本。但在IT领域内的现实就是这样，越容易掌握的东西，学习的人越多，而且淘汰得越快。但基础学扎实了，无论今后出来什么新技术，再怎么变幻莫测，它总是架在计算机原理上的，到时候你还不是对它手到擒来？ 这里有一个和我有关的例子，大家可以看看： 在大一时我还找不到开机按纽，而我的一位同学已经会写些简单的汇编程序了。我把大二的所有时间花在了汇编，计算机体系结构，数据结构，操作系统原理等等这些课程的学习上，而他则开始学习HTML和VB，并追赶ASP的潮流。大三的时候我开始学习Windows 操作系统原理，学习SDK编程，时间是漫长的，这时我才能够用VC开发出象模象样的应用程序。我曾一度因为同学的程序已经能够运行而自己还在学习如何创建对话框而懊恼不已，但临到毕业才发现自己的选择是何等的正确。和我谈判的公司开出的薪水是他的两倍还多。下面有一个不很恰当的比方：假设学习VB编程需要4个月，学习基础课程和VC的程序设计需要1年。那么如果你先学VB，再来学习后者，时间不会减少，还是1年，而反过来，如果先学习后者，再来学VB，也许你只需要1个星期就能学得非常熟练。 这是一个很典型的例子，在大学里，你的主要任务还是学好基础，我听很多学弟们经常把《计算机组成原理》《网络原理》的课程逃掉去实验室机房做一些WEB开发，个人觉得是非常愚蠢的做法。 说了这么多，这也算是我作为一个过来人的心得，如果你还是在校的学生，或者是刚要进入IT行业的初学者，我真挚地希望，我的这些忠告可以在你未来的职业生涯上派上用场。 参考与来源 linuxeden page","tags":"Life","title":"Some Tips On It Learning"},{"url":"pages/2015/06/15/git-some-note/","text":"一些常用git命令 1. 安装 在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包。 完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。 2. 配置 首先是配置帐号信息 $ git config --global user.name sennhviwang $ git config --global user.email sennhviwang 设置一些别名 # 注册别名被所有用户使用 $ sudo git config --system alias.st status $ sudo git config --system alias.ci commit # 对本用户全局配置 $ git config --global alias.st status $ git config --global alias.ci commit 在Git命令输出中开启颜色显示 $ git config --global color.ui true 查看配置的信息 $ git config --list 获取帮助信息 $ git help config 配置自动换行 git config --global core.autocrlf input # 提交到git是自动将换行符转换为lf 配置密钥 $ ssh-keygen -t rsa -C yanhaijing@yeah.net # 生成密钥 $ ssh -T git@github.com # 测试是否成功 3. 新建仓库 $ git init # 初始化 $ git status # 查询仓库状态 $ git add [ file ] # .或*代表全部添加 $ git commit -m \"commit msg\" $ git remote add origin git@github.com:sennhviwang/test.git # 添加remote仓库 $ git push -u origin master # push同时设置默认提交分支 从现有仓库克隆 $ git clone git://github.com/sennhviwang/test.git $ git clone git://github.com/schacon/grit.git /path/to/repo/dir # 克隆到dir 4. 添加与提交 本地 $ git add * # 添加新文件 $ rm [ file ] & git rm [ file ] # 移除文件file $ git rm -f * # 移除文件 $ git rm --cached * # 取消跟踪 $ git mv file_from file_to # 重命名跟踪文件 $ git log # 查看提交记录 $ git commit # 提交更新 $ git commit -m 'commit msg' $ git commit -a # 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交 $ git commit --amend # 修改最后一次提交 5. 重置与调整 $ git reset HEAD * # 取消已经暂存的文件 $ git checkout -- file # 取消对文件的修改（从暂存区去除file） $ git checkout branch | tag | commit -- file_name # 从仓库取出file覆盖当前分支 $ git checkout -- . # 从暂存区去除文件覆盖工作区 6. 分支 $ git branch # 列出本地分支 $ git branch -r # 列出远端分支 $ git branch -a # 列出所有分支 $ git branch -v # 查看各个分支最后一个提交对象的信息 $ git branch --merge # 查看已经合并到当前分支的分支 $ git branch --no-merge # 查看为合并到当前分支的分支 $ git branch test # 新建test分支 $ git checkout test # 切换到test分支 $ git checkout -b test # 新建+切换到test分支 $ git checkout -b test dev # 基于dev新建test分支，并切换 $ git branch -d test # 删除test分支 $ git branch -D test # 强制删除test分支 $ git merge test # 将test分支合并到当前分支 $ git rebase master # 将master分之上超前的提交，变基到当前分支 7. 远端 $ git fetch originname branchname # 拉去远端上指定分支 $ git merge originname branchname # 合并远端上指定分支 $ git push originname branchname # 推送到远端上指定分支 $ git push originname localbranch:serverbranch # 推送到远端上指定分支 $ git checkout -b test origin/dev # 基于远端dev新建test分支 $ git push origin :server # 删除远端分支源 添加多个远端仓库[本人用来做本地备份] $ git init --bare # 在远端[REPO.git]文件夹中执行，以初始化远端仓库,git remote add origin ../ProjectGit/tmp.git/ $ git remote add origin git@ [ PATH_TO_GIT_REPO.git ] $ git remot e # 显示全部源 $ git remote -v # 显示全部源和详细信息 $ git remote rename origin1 origin2 # 重命名 $ git remote rm origin1 # 删除远端仓库 $ git remote show origin1 # 查看指定源的全部信息 8. 标签 $ git tag # 列出现有标签 $ git tag v0.1 # 新建标签 $ git tag -a v0.1 -m 'my version 1.4' # 新建带注释标签 $ git checkout tagname # 切换到标签 $ git push origin v1.5 # 推送分支到源上 $ git push origin --tags # 一次性推送所有分支 $ git tag -d v0.1 # 删除标签 $ git push origin :refs/tags/v0.1 # 删除远程标签 9. 参考与来源 1. 颜海镜 2. Git权威指南","tags":"Vcs","title":"Git Some Note"},{"url":"pages/2015/06/15/autojump-between-dirs/","text":"autojump 工具 本文将介绍一个实用的命令行工具，它允许你可以快速跳转到你喜爱的目录。 1. 安装 在Ubuntu或Debian上安装autojump： $ sudo apt-get install autojump 在CentOS或Fedora上安装autojump，请使用yum命令。在CentOS上，你需要先启用EPEL仓库才行。 $ sudo yum install autojump 在Archlinux上安装autojump： $ sudo pacman -S autojump 如果你找不到适合你的版本的包，你可以从 GitHub 上下载源码包来编译: $ git clone git://github.com/joelthelion/autojump.git $ cd autojump && ./install.py 2. autojump的基本用法 autojump的工作方式很简单：它会在你每次启动命令时记录你当前位置，并把它添加进它自身的数据库中。 这样，某些目录比其它一些目录添加的次数多，它们的\"权重\"也会较大。 现在不管你在哪个目录，你都可以使用下面的语法来直接跳转到这些目录： $ autojump [ 目录的名字或名字的一部分 ] 示例: $ j [ 目录的名字或名字的一部分 ] autojump支持zsh和自动补完。使用TAB召唤更多信息～ 3. 高级功能 访问并修改目录数据库 手动添加一个目录： $ autojump -a [ 目录 ] 增加当前目录的权重： $ autojump -i [ 权重 ] 减少当前目录的权重： $ autojump -d [ 权重 ] 显示数据库中的统计数据： $ autojump -s 把不再存在的目录从数据库中移除： $ autojump --purge 4. 参考与来源 1. Xmodulo Page 2. Developer: Joel Schaerer","tags":"Linux","title":"Autojump Between Dirs"},{"url":"pages/2015/06/14/usage-of-echo/","text":"1. 输出变量的值: $ x = 3 $ echo x = $xj 2. [Option] -e -E 取消对'\\'的转义（默认） '\\n' 换行 '\\b' 退格 '\\t' 水平制表符 '\\v' 垂直制表符 '\\r' 指定输出中的回车符 [ 会覆盖行至行开头] '\\c' 会抑制输出后面的所有字符且不会换新行 '\\a' 警告声 '\\e' escape '\\f' 换页 '\\0NNN' 八进制表示的字节（1～3位数） '\\xHH' 十六进制表示的字节（1～2位数） 3. [Option] -n 抑制新行的输出 4. 命令的替代 $ echo * 列出目录下所有文件 $ echo *.jpg 列出指定类型文件 $ echo * > test.txt 内容重定向 5. SEE ALSO The full documentation for echo is maintained as a Texinfo manual. If the info and echo programs are properly installed at your site, the command: $ info coreutils 'echo invocation' should give you access to the complete manual.","tags":"Linux","title":"Usage Of `Echo`"},{"url":"pages/2015/06/14/tenth-line/","text":"1. How would you print just the 10th line of a file? 最近碰巧看见一道leetcode上的题，刚开始觉得会很简单，然而操作起来就觉得自己太天真了： Q: 你将如何打印一个文件的第十行? 示例文件filt.txt 含有如下内容: Line 1 Line 2 Line 3 Line 4 Line 5 Line 6 Line 7 Line 8 Line 9 Line 10 2. 你会怎么做 第一反应会这样 $ head -10 file.txt | tail -1 然而结果报错： Input: 1 \\n 2 \\n 3 \\n 4 \\n 5 \\n 6 \\n 7 \\n 8 \\n 9 Output: 9 Expected: 原来指的是无论第十行是否存在都会输出第十行（即不存在输出为空） 于是有了正确的版本： $ tail -n +10 file.txt | head -1 [ Option ] -n, --lines = k 输出最后k行（默认是10），或者使用-n +k 产生从第k行开始（到结尾）的输出 然后开始解锁更多方案 #使用awk $ awk 'FNR == 10 {print }' file.txt $ awk 'NR == 10' file.txt #使用sed $ sed -n 10p file.txt #使用bash $ cnt = 0 while read line && [ $cnt -le 10 ] ; do let 'cnt = cnt + 1' if [ $cnt -eq 10 ] ; then echo $line exit 0 fi done < file.txt**** $ IFS = $'\\n' ; arr =( $( <file.txt ) ) ; echo ${ arr [9] } # IFS== Internal Field Separator 内部域分隔符，对文本分隔存为数组然后获取第十个","tags":"Linux","title":"Tenth Line"},{"url":"pages/1970/01/01/readme/","text":"博客文章MD文件备份 使用请申请，保留著作权。","tags":"Life","title":"README"}]}